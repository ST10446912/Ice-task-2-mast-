Ice task 2 mast

import React, { useState, useEffect, useRef } from 'react';
import { View, Text, Button, StyleSheet, TextInput, Animated } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import AsyncStorage from '@react-native-async-storage/async-storage';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Game" component={GameScreen} />
        <Stack.Screen name="Result" component={ResultScreen} />
        <Stack.Screen name="Leaderboard" component={LeaderboardScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

// Home Screen
function HomeScreen({ navigation }) {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Arithmetica's Magical Quest</Text>
      <Text style={styles.description}>
        Help Arithmetica pass her wizard exams by solving magical arithmetic problems!
      </Text>
      <View style={styles.buttonContainer}>
        <Button title="Start Training" onPress={() => navigation.navigate('Game')} />
        <Button title="View Your Score" onPress={() => navigation.navigate('Leaderboard')} />
      </View>
    </View>
  );
}

// Game Screen
function GameScreen({ navigation }) {
  const [operation, setOperation] = useState('Addition');
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [timeLeft, setTimeLeft] = useState(60);
  const [score, setScore] = useState(0);
  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);
  const timerRef = useRef(null);
  const fadeAnim = useRef(new Animated.Value(1)).current;

  useEffect(() => {
    generateQuestion();
    timerRef.current = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 0) {
          clearInterval(timerRef.current);
          saveHighScore(score);
          navigation.navigate('Result', { score });
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timerRef.current);
  }, [timeLeft]);

  
  const generateQuestion = () => {
    let num1, num2;
    switch (operation) {
      case 'Addition':
        num1 = Math.floor(Math.random() * 10) + 1;
        num2 = Math.floor(Math.random() * 10) + 1;
        setQuestion(`${num1} + ${num2}`);
        setAnswer(num1 + num2);
        break;
      case 'Subtraction':
        num1 = Math.floor(Math.random() * 20) + 1;
        num2 = Math.floor(Math.random() * 10) + 1;
        setQuestion(`${num1} - ${num2}`);
        setAnswer(num1 - num2);
        break;
      case 'Multiplication':
        num1 = Math.floor(Math.random() * 10) + 1;
        num2 = Math.floor(Math.random() * 10) + 1;
        setQuestion(`${num1} * ${num2}`);
        setAnswer(num1 * num2);
        break;
      case 'Division':
        num1 = Math.floor(Math.random() * 100) + 1;
        num2 = Math.floor(Math.random() * 10) + 1;
        const quotient = Math.floor(num1 / num2); 
        setQuestion(`${num1} รท ${num2}`);
        setAnswer(quotient);
        break;
      default:
        setQuestion('');
        setAnswer(0);
    }
  };

  const checkAnswer = () => {
    const parsedUserAnswer = parseFloat(userAnswer); 
    if (parsedUserAnswer === answer) {
      setIsAnswerCorrect(true);
      animateCorrectAnswer();
      setScore((prevScore) => prevScore + 100);
      generateQuestion();
      setUserAnswer('');
    } else {
      setIsAnswerCorrect(false);
    }
  };

  const animateCorrectAnswer = () => {
    Animated.sequence([
      Animated.timing(fadeAnim, {
        toValue: 0.5,
        duration: 500,
        useNativeDriver: true,
      }),
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }),
    ]).start();
  };

  const saveHighScore = async (newScore) => {
    try {
      await AsyncStorage.setItem('personalScore', JSON.stringify(newScore));
    } catch (e) {
      console.error('Error saving score', e);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Solve the magical equation!</Text>
      <Text style={styles.operation}>Operation: {operation}</Text>
      <View style={styles.operationButtons}>
        <Button title="Addition" onPress={() => setOperation('Addition')} />
        <Button title="Subtraction" onPress={() => setOperation('Subtraction')} />
        <Button title="Multiplication" onPress={() => setOperation('Multiplication')} />
        <Button title="Division" onPress={() => setOperation('Division')} />
      </View>
      <Animated.Text style={[styles.question, { opacity: fadeAnim }]}>{question} = ?</Animated.Text>
      <TextInput
        style={styles.input}
        keyboardType="numeric"
        placeholder="Your answer"
        value={userAnswer}
        onChangeText={(text) => setUserAnswer(text)}
      />
      <Button title="Submit Answer" onPress={checkAnswer} />
      <Text style={styles.timer}>Time Left: {timeLeft} seconds</Text>
      <Text style={styles.score}>Score: {score}</Text>
    </View>
  );
}

// Leaderboard Screen
function LeaderboardScreen() {
  const [personalScore, setPersonalScore] = useState(null);

  useEffect(() => {
    const loadPersonalScore = async () => {
      try {
        const savedScore = await AsyncStorage.getItem('personalScore');
        if (savedScore) {
          setPersonalScore(JSON.parse(savedScore));
        } else {
          setPersonalScore(0);
        }
      } catch (error) {
        console.error('Error loading personal score', error);
      }
    };
    loadPersonalScore();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Your Score</Text>
      {personalScore !== null ? (
        <Text style={styles.scoreText}>Your highest score: {personalScore}</Text>
      ) : (
        <Text>No score recorded yet.</Text>
      )}
    </View>
  );
}

// Result Screen
function ResultScreen({ route, navigation }) {
  const { score } = route.params;
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Training Complete!</Text>
      <Text style={styles.score}>Your final score: {score}</Text>
      <Button title="Continue Training" onPress={() => navigation.navigate('Game')} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#F0F8FF', 
  },
  title: {
    fontSize: 28,  
    fontWeight: '700',  
    marginBottom: 25,
    color: '#333',  
    textShadowColor: '#aaa',  
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
  description: {
    textAlign: 'center',
    fontSize: 18,  
    color: '#555',  
    marginBottom: 25,
  },
  operation: {
    fontSize: 20,  
    color: '#007BFF',
    marginBottom: 15,
  },
  question: {
    fontSize: 36,  
    color: '#FF4500',  
    marginBottom: 25,
  },
  input: {
    width: '80%',
    padding: 12, 
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 10,  
    backgroundColor: '#fff',  
    marginBottom: 25,
    shadowColor: '#000',  
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 2,  
  },
  timer: {
    fontSize: 22,
    color: '#28a745',  
    marginTop: 25,
  },
  score: {
    fontSize: 22,
    color: '#dc3545',  
    marginTop: 15,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    marginTop: 25,
  },
  operationButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 15,
    width: '100%',
  },
  scoreText: {
    fontSize: 20,
    color: '#333',  
  },
});

