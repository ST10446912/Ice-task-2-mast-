Ice task 2 mast


import React, { useState, useEffect, useRef } from 'react';
import { View, Text, Button, StyleSheet, TextInput, Alert, Animated } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import AsyncStorage from '@react-native-async-storage/async-storage';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Game" component={GameScreen} />
        <Stack.Screen name="Result" component={ResultScreen} />
        <Stack.Screen name="Leaderboard" component={LeaderboardScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

// Home Screen
function HomeScreen({ navigation }) {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Arithmetica's Magical Quest</Text>
      <Text style={styles.description}>
        Help Arithmetica pass her wizard exams by solving magical arithmetic problems!
      </Text>
      <View style={styles.buttonContainer}>
        <Button title="Start Training" onPress={() => navigation.navigate('Game')} />
        <Button title="View Leaderboard" onPress={() => navigation.navigate('Leaderboard')} />
      </View>
    </View>
  );
}

// Game Screen
function GameScreen({ navigation }) {
  const [difficulty, setDifficulty] = useState('Apprentice');
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [timeLeft, setTimeLeft] = useState(30);
  const [score, setScore] = useState(0);
  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);
  const [powerUps, setPowerUps] = useState({
    scoreDoubler: 1,
    revealAnswer: 1,
    freezeTimer: 1,
  });
  const [timeFrozen, setTimeFrozen] = useState(false);
  const [scoreDoublerActive, setScoreDoublerActive] = useState(false);
  const timerRef = useRef(null);
  const fadeAnim = useRef(new Animated.Value(1)).current;

  useEffect(() => {
    generateQuestion();
    if (!timeFrozen) {
      timerRef.current = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 0) {
            clearInterval(timerRef.current);
            saveHighScore(score);
            navigation.navigate('Result', { score });
          }
          return prev - 1;
        });
      }, 1000);
    }

    return () => clearInterval(timerRef.current);
  }, [timeLeft, timeFrozen]);

  // Generate a question based on difficulty
  const generateQuestion = () => {
    let num1, num2;
    if (difficulty === 'Apprentice') {
      num1 = Math.floor(Math.random() * 10) + 1;
      num2 = Math.floor(Math.random() * 10) + 1;
      setQuestion(`${num1} + ${num2}`);
      setAnswer(num1 + num2);
    } else if (difficulty === 'Wizard') {
      num1 = Math.floor(Math.random() * 10) + 1;
      num2 = Math.floor(Math.random() * 10) + 1;
      setQuestion(`${num1} * ${num2}`);
      setAnswer(num1 * num2);
    } else if (difficulty === 'Sorcerer') {
      num1 = Math.floor(Math.random() * 100) + 1;
      num2 = Math.floor(Math.random() * 100) + 1;
      setQuestion(`${num1} - ${num2}`);
      setAnswer(num1 - num2);
    }
  };

  const checkAnswer = () => {
    const parsedUserAnswer = parseInt(userAnswer);
    console.log(`User Answer: ${parsedUserAnswer}, Correct Answer: ${answer}`);
    
    if (parsedUserAnswer === answer) {
      console.log('Correct Answer!');
      setIsAnswerCorrect(true);
      animateCorrectAnswer();
      const points = scoreDoublerActive ? 200 : 100; 
      setScore((prevScore) => prevScore + points);
      console.log(`Score Updated: ${points}, New Score: ${score + points}`);
      setScoreDoublerActive(false);
      generateQuestion();
      setUserAnswer('');
      extendTime();
    } else {
      console.log('Incorrect Answer!');
      setIsAnswerCorrect(false);
    }
  };

  // Time extension for correct answers
  const extendTime = () => {
    setTimeLeft((prevTime) => prevTime + 5);
  };

  // Animation for correct answers
  const animateCorrectAnswer = () => {
    Animated.sequence([
      Animated.timing(fadeAnim, {
        toValue: 0.5,
        duration: 500,
        useNativeDriver: true,
      }),
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }),
    ]).start();
  };

  const saveHighScore = async (newScore) => {
    try {
      const savedScores = await AsyncStorage.getItem('highScores');
      const scores = savedScores ? JSON.parse(savedScores) : [];
      scores.push(newScore);
      await AsyncStorage.setItem('highScores', JSON.stringify(scores));
    } catch (e) {
      console.error('Error saving score', e);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Solve the magical equation!</Text>
      <Text style={styles.difficulty}>Difficulty: {difficulty}</Text>
      <Animated.Text style={[styles.question, { opacity: fadeAnim }]}>{question} = ?</Animated.Text>
      <TextInput
        style={styles.input}
        keyboardType="numeric"
        placeholder="Your answer"
        value={userAnswer}
        onChangeText={(text) => setUserAnswer(text)}
      />
      <Button title="Submit Answer" onPress={checkAnswer} />
      <Text style={styles.timer}>Time Left: {timeLeft} seconds</Text>
      <Text style={styles.score}>Score: {score}</Text>
      <View style={styles.powerUps}>
        <Button
          title="Score Doubler"
          onPress={() => {
            if (powerUps.scoreDoubler > 0) {
              setScoreDoublerActive(true);
              setPowerUps((prev) => ({ ...prev, scoreDoubler: prev.scoreDoubler - 1 }));
            }
          }}
          disabled={powerUps.scoreDoubler === 0}
        />
        <Button
          title="Reveal Answer"
          onPress={() => {
            if (powerUps.revealAnswer > 0) {
              setUserAnswer(answer.toString());
              setPowerUps((prev) => ({ ...prev, revealAnswer: prev.revealAnswer - 1 }));
            }
          }}
          disabled={powerUps.revealAnswer === 0}
        />
        <Button
          title="Freeze Timer"
          onPress={() => {
            if (powerUps.freezeTimer > 0) {
              setTimeFrozen(true);
              setPowerUps((prev) => ({ ...prev, freezeTimer: prev.freezeTimer - 1 }));
              setTimeout(() => setTimeFrozen(false), 5000); 
            }
          }}
          disabled={powerUps.freezeTimer === 0}
        />
      </View>
    </View>
  );
}

// Leaderboard Screen
function LeaderboardScreen() {
  const [highScores, setHighScores] = useState([]);

  useEffect(() => {
    const loadScores = async () => {
      try {
        const savedScores = await AsyncStorage.getItem('highScores');
        if (savedScores) {
          const scoresArray = JSON.parse(savedScores).sort((a, b) => b - a);
          setHighScores(scoresArray);
        } else {
          setHighScores([]); 
        }
      } catch (error) {
        console.error('Error loading high scores', error);
      }
    };
    loadScores();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Leaderboard</Text>
      {highScores.length === 0 ? (
        <Text>No scores yet. Play a game to set a high score!</Text>
      ) : (
        highScores.map((score, index) => (
          <Text key={index} style={styles.scoreText}>
            {index + 1}. {score}
          </Text>
        ))
      )}
    </View>
  );
}

// Result Screen
function ResultScreen({ route, navigation }) {
  const { score } = route.params;
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Training Complete!</Text>
      <Text style={styles.score}>Your final score: {score}</Text>
      <Button title="Continue Training" onPress={() => navigation.navigate('Game')} />
    </View>
  );
}

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#F0F8FF', 
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  description: {
    textAlign: 'center',
    marginBottom: 20,
  },
  difficulty: {
    fontSize: 18,
    marginBottom: 20,
  },
  question: {
    fontSize: 32,
    marginBottom: 20,
  },
  input: {
    width: '80%',
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    marginBottom: 20,
  },
  timer: {
    fontSize: 20,
    marginTop: 20,
  },
  score: {
    fontSize: 20,
    marginTop: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    marginTop: 20,
  },
  powerUps: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 20,
    width: '100%',
  },
  scoreText: {
    fontSize: 18,
  },
});
